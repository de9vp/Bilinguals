@model Bilinguals.Domain.Models.Dialog

@{
    ViewBag.Title = "Details";
    var returnUrl = Request.QueryString["returnUrl"];
}

<h2>Details</h2>

@*<button type="button" class="btn btn-warning btn-sm" data-bs-toggle="modal" data-bs-target="#bsModal">
    <span class="bi bi-pencil-square"></span>
</button>*@

<div>
    <h4>Dialog</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.DateCreated)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.DateCreated)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.DateModified)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.DateModified)
        </dd>

    </dl>
</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.Id }) |
    @Html.ActionLink("Back to List", "Index")
</p>

<h3> Sentences </h3>

<table class="table table-bordered">
    @foreach (var item in Model.Sentences)  //Bug: Object reference not set to an instance of an object => add virtual to navigation properties in Model
    {
        <tr>
            <td> @item.EnText </td>
            <td> @item.ViText </td>
            <td>
                @*<button data-sentenceid="@item.Id" data-usersentenceid="@item.UserSentenceId" class="btn-save-remove btn btn-sm btn-@(!item.UserSentenceId.HasValue ? "outline-primary" : "primary")" title="@(item.UserSentenceId.HasValue ? "Remove" : "Save")">
                    <span class="bi bi-@(!item.UserSentenceId.HasValue ? "bookmark-plus":"bookmark-check")"></span>
                </button>*@

                <div class="btn-group dropstart">
                    <button type="button" data-sentenceid="@item.Id" data-usersentenceid="@item.UserSentenceId" class="btn btn-select btn-@(!item.UserSentenceId.HasValue ? "outline-primary" : "primary") btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        <span class="bi bi-@(!item.UserSentenceId.HasValue ? "bookmark-plus":"bookmark-check")"></span> <span id="gn">@item.GroupName</span>
                    </button>
                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                        <li><a href="#" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#bsModal">Add to new list</a></li>
                        <li><a class="dropdown-item remove" href="#">Remove</a></li>
                        <li><hr class="dropdown-divider"></li>
                    </ul>
                </div>

            </td>
        </tr>
    }
</table>

<!-- Modal -->
<div class="modal fade" id="bsModal" tabindex="-1">
    <div class="modal-dialog modal-sm" role="document">
        <div class="modal-content"></div>
    </div>
</div>

@section scripts {
    <script src="~/Scripts/jquery.form.js"></script>
    <script type="text/javascript">

        // save and remove sentence
        var handleSaveRemove = function () {
            var _savingUrl = '/Sentences/SaveToMyFeaturedSentences?sentenceId=';
            var _removingUrl = '/Sentences/RemoveFromMyFeaturedSentence?userSentenceId=';

            var sentenceId;
            var groupId;
            var userSentenceId;

            // https://stackoverflow.com/questions/29388002/jquery-ajax-sending-multiple-request-on-1-click

            $('.btn-select').off('click').on('click', function (e) {
                e.preventDefault();
                var _this = $(this);
                sentenceId = _this.data('sentenceid'); //note: lower case
                userSentenceId = _this.data('usersentenceid');

                //save
                $('.save').off('click').on('click', function (e) {
                    groupId = $(this).data('groupid');
                    var url = _savingUrl + sentenceId + '&groupId=' + groupId;

                    $.ajax({
                        url: url,
                        success: function (data) {
                            _this.find('#gn').remove();
                            _this.removeClass('btn-outline-primary').addClass('btn-primary')
                                .data('usersentenceid', data.userSentenceId) //bug
                                .append(`<span id="gn">${data.groupName}</span>`)
                                .find('.bi').removeClass('bi-bookmark-plus').addClass('bi-bookmark-check');
                        }
                    });

                });

                //remove
                $('.remove').off('click').on('click', function (e) {
                    e.preventDefault();
                    var URl = _removingUrl + userSentenceId;

                    $.ajax({
                        url: URl,
                        success: function () {
                            _this.find('#gn').remove();
                                _this.removeClass('btn-primary').addClass('btn-outline-primary')
                                    .data('usersentenceid', null) //bug
                                    .find('.bi').removeClass('bi-bookmark-check').addClass('bi-bookmark-plus');
                        },
                        error: function () {
                            //thong bao chua luu 
                            alert("chua luu remove cai quan a");
                        },

                    });
                });
            });
        };

        // 
        var simplePromiseRequest = (url) => {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: url,
                    success: (data) => {
                        resolve(data);
                    },
                    error: (res) => {
                        reject(res);
                    },
                });
            });
        }

        // get list groups 
        var groupService = (function () {

            var _resourceUrl = '/groups/getusergroups';
            var getUserGroups = () => {
                return simplePromiseRequest(_resourceUrl);
            };

            return { getUserGroups, }
        })();

        //json request group list
        var getUserGroups = function() {
            var _group = [];
            groupService.getUserGroups().then((data) => {
                console.log(data);
                _group = data;
                var rows = _group.reduce((all, group) => {
                    var groupRow = `<li><a data-groupid="${group.id}" class="dropdown-item save" href="#">${group.name}</a></li>`;
                    return all += groupRow;
                }, '');
                $('.gr').remove();
                $('.dropdown-menu').append(rows);
            });
        }

        // handle create group (promise calback)
        var bsModal = (function () {
            var _completeCallback, _beforeShowCallback;

            var getGroup = () => { return simplePromiseRequest('/groups/create'); }

            function handleBsModal() {
                $('#bsModal').on('show.bs.modal', function () {
                    _beforeShowCallback();
                });

                $('#bsModal').on('shown.bs.modal', function (event) {
                    // If necessary, you could initiate an AJAX request here (and then do the updating in a callback).
                    // Update the modal's content. We'll use jQuery here, but you could use a data binding library or other methods instead.
                    var modal = $(this);

                    getGroup()
                        .then((data) => {
                            modal.find('.modal-content').empty().append(data); //data = partial view
                        })
                        .then(bindAjaxForm) //ajaxForm request submit here
                        .then((data) => {
                            _completeCallback(data);
                        });
                });
            }

            function bindAjaxForm() {
                var myForm = $('#bsModal').find('form');

                return new Promise((resolve, reject) => {
                    myForm.ajaxForm({
                        beforeSubmit: function (data) {
                        },
                        success: function (data) {
                            $('#bsModal').find('button.btn-close').trigger('click');
                            resolve(data);
                        },
                        error: reject
                    });
                });
            }

            return {
                init: function (beforeShowCallback, completeCallback) {
                    handleBsModal();
                    _completeCallback = completeCallback;
                    _beforeShowCallback = beforeShowCallback;
                }
                ,
                setState: function () { }
            };
        })();

        var Main = (function () {
            return {
                init: function () {
                    bsModal.init(() => { bsModal.setState() }, (newGroup) => {
                        //Add userSentence to this group

                        //change ui dropdown
                        getUserGroups();
                    });
                    getUserGroups();
                    handleSaveRemove();
                },
            }
        })();

        $(function () {
            Main.init();
        });

    </script>
}
